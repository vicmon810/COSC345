name: CMake

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
<<<<<<< HEAD
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          bootstrap-vcpkg.bat
        shell: cmd

      - name: Update vcpkg
        run: |
          cd vcpkg
          git pull
        shell: cmd

      - name: Install mongo-cxx-driver
        run: vcpkg install mongo-cxx-driver:x64-windows
        shell: powershell

      - name: Install qt5-base
        run: vcpkg install qt5-base:x64-windows
        shell: powershell

      - name: Print vcpkg root directory
        run: |
          $vcpkg_root = $(vcpkg --print-root)
          echo "vcpkg root directory: $vcpkg_root"
        shell: powershell
        id: print_vcpkg_root
        continue-on-error: true

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH=${{ steps.print_vcpkg_root.outputs.vcpkg_root }}
        shell: powershell

      - name: Build Project
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        shell: powershell

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}
        shell: powershell
=======
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
          
    - name: Install libraries
      run: |
        wget https://download.qt.io/new_archive/qt/5.7/5.7.0/qt-opensource-linux-x64-5.7.0.run
        chmod +x qt-opensource-linux-x64-5.7.0.run ./qt-opensource-linux-x64-5.7.0.run
        sudo apt-get install build-essential
        sudo apt-get install libfontconfig1

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

>>>>>>> 46a013a2fc84d7d1252c694a15702a4d429cbe89
